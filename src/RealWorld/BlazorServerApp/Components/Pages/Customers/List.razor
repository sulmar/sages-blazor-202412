@page "/customers"
@inject ICustomerRepository Repository


<h3>Customers</h3>

<SearchPanel OnSearch="@Search"
OnClear="@( () => Console.WriteLine("Cleared!") )" />


<a href="/customers/create" class="btn btn-primary">Add</a>

<Loader @bind-IsLoading="@IsLoading" @bind-IsLoading:after="@OnLoaded" >

    <TableTemplate Items="@Customers" Context="customer">
        <HeaderTemplate>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th></th>
        </HeaderTemplate>

        <RowTemplate>
            <td>#@customer.Id</td>
            <td>@customer.FirstName</td>
            <td>@customer.LastName</td>
            <td><a class="btn btn-primary" href="@($"/customers/{customer.Id}")">View</a></td>
        </RowTemplate>
    </TableTemplate>

</Loader>



@code {

    private IEnumerable<Customer> Customers { get; set; }

    private bool IsLoading { get; set; }

    private Task OnLoaded()
    {
        Console.WriteLine("OnLoaded");
        return Task.CompletedTask;
    }


    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        await Task.Delay(3000);

        Customers = await Repository.GetAllAsync();

        IsLoading = false;
    }

    private async Task Search(string searchText)
    {
        Customers = await Repository.GetBySearchTextAsync(searchText);

    }

    private async Task Clear()
    {
        Customers = new List<Customer>();
    }
}
